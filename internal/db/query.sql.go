// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (
  profile, lastCompletion
) VALUES (
  $1, $2
)
RETURNING profile, lastcompletion
`

type CreateProfileParams struct {
	Profile        string
	Lastcompletion pgtype.Timestamp
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, createProfile, arg.Profile, arg.Lastcompletion)
	var i Profile
	err := row.Scan(&i.Profile, &i.Lastcompletion)
	return i, err
}

const deleteProfile = `-- name: DeleteProfile :exec
DELETE FROM profiles
WHERE profile = $1
`

func (q *Queries) DeleteProfile(ctx context.Context, profile string) error {
	_, err := q.db.Exec(ctx, deleteProfile, profile)
	return err
}

const getProfile = `-- name: GetProfile :one
SELECT profile, lastcompletion FROM profiles
WHERE profile = $1
LIMIT 1
`

func (q *Queries) GetProfile(ctx context.Context, profile string) (Profile, error) {
	row := q.db.QueryRow(ctx, getProfile, profile)
	var i Profile
	err := row.Scan(&i.Profile, &i.Lastcompletion)
	return i, err
}

const listProfiles = `-- name: ListProfiles :many
SELECT profile, lastcompletion FROM profiles
`

func (q *Queries) ListProfiles(ctx context.Context) ([]Profile, error) {
	rows, err := q.db.Query(ctx, listProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(&i.Profile, &i.Lastcompletion); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProfile = `-- name: UpdateProfile :exec
UPDATE profiles
  set lastCompletion = $2
WHERE profile = $1
RETURNING profile, lastcompletion
`

type UpdateProfileParams struct {
	Profile        string
	Lastcompletion pgtype.Timestamp
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) error {
	_, err := q.db.Exec(ctx, updateProfile, arg.Profile, arg.Lastcompletion)
	return err
}
